
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 146
#define YY_END_OF_BUFFER 147
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[462] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      147,  127,  128,  129,  127,  127,  127,   42,    2,    1,
       41,   28,   26,   42,   42,   24,   24,   26,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   25,   45,

        2,   43,   45,   44,   55,    2,   55,   54,   57,    2,
       57,   56,   73,    2,   71,   73,   72,   99,   99,   98,
      100,   99,   99,   99,  101,  105,  108,  108,  106,  117,
      108,  107,  108,  108,  108,  108,  108,  108,  108,  108,
      109,  122,  142,  143,  142,  142,  133,  130,  133,  133,
      121,    5,    2,    5,    4,    4,    3,    7,    2,    7,
        6,    6,  104,   40,   48,   47,   49,   53,   48,   48,
       46,   60,    2,   58,   60,   59,   64,    2,   61,   64,
       63,   62,   66,    2,   65,   67,   68,   66,   70,   69,
       93,    2,   92,   95,   94,   93,   96,   97,  146,    2,

       91,   90,  146,   89,  138,  136,  138,  137,   87,   88,
       85,   87,   86,   84,   83,   82,   75,    2,   75,   74,
       81,   80,   77,   76,   78,   79,   34,   32,   31,   33,
       38,   36,   37,   39,   35,   29,   30,  118,  120,  119,
      127,  124,  123,    0,    2,   24,   24,  145,  144,    0,
       27,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   99,   99,   99,   99,  108,
        0,  108,    0,    0,    0,    0,    0,    0,  142,  141,
        0,  133,  132,  131,    0,    4,    4,    0,    3,    6,
        6,    0,   48,   66,    2,   93,    2,   89,  138,   87,

       81,   32,   38,  118,  118,    0,   24,   23,   23,   23,
       23,   14,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   99,   99,   99,   99,    0,  108,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    4,    6,    0,   12,
       23,   23,   23,   15,   23,   23,   23,   23,   23,   23,
       23,   11,   99,   99,   99,   99,   99,    0,  108,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  126,
        0,    8,   23,   16,   23,   13,   23,   23,   23,   23,
       23,   23,   99,   99,   99,  102,   99,    0,    0,  113,
        0,  110,  114,    0,    0,    0,    0,    0,    0,  125,

       17,   23,   18,   20,    9,   23,   23,   23,   99,   99,
       99,   99,  111,    0,    0,    0,    0,    0,    0,    0,
        0,   23,   23,   23,   23,   99,   99,   52,  103,   99,
        0,    0,    0,    0,   52,  116,    0,  140,    0,  135,
       23,   22,   10,   19,   51,   50,    0,    0,   51,   50,
      139,  134,   21,    0,  112,    0,    0,    0,    0,  115,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    1,    5,
        6,    7,    8,    9,    8,    1,   10,   11,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,   14,   15,
        1,   16,    1,   17,   18,   19,   20,   21,   22,   23,
       24,   24,   25,   26,   27,   28,   29,   30,   31,   24,
       24,   32,   33,   34,   35,   36,   37,   24,   24,   24,
       38,   39,   40,    1,   41,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   24,   24,   51,   52,   53,
       54,   55,   24,   56,   57,   58,   59,   60,   24,   61,
       62,   24,   63,    1,   64,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    2,    3,    4,    5,    5,    6,    1,    7,    8,
        9,    9,    1,   10,   11,   11,    2,    9,   12,    9,
        9,    9,    9,   13,   13,   14,   13,   13,   13,   14,
       13,   14,   14,   15,   14,   14,   14,   16,   17,   16,
       18,    9,    9,    9,    9,    9,    9,   13,   13,   13,
       13,   13,   13,   13,   13,   14,   13,   19,   13,   13,
       13,   13,   20,   20
    } ;

static yyconst flex_int16_t yy_base[505] =
    {   0,
        0,    2,   60,    0,  123,  127,  132,  136,  138,  141,
        6,   12,  150,  152,  215,  278,   17,   18,   20,   23,
     1422, 1421,  342,  406,   29,  162,  179,  220,  122,  131,
      223,  252,  260,  284,  321,  325,  361,  384,  174,  367,
      390,  423,  432,  446,  455,  469,  479,  543,   25,   35,
      200,  282,  494,  497,  499,  510,  209,  243,  274,  297,
       40,   44,  142,  156,  172,  302,  144,  269,    9,   14,
     1484,    0, 1487, 1487,  156, 1465, 1487, 1487, 1480, 1487,
     1487, 1487, 1487,  242,  195,  248,  291, 1468,    0,  107,
     1426, 1428, 1425, 1423,  381,   85, 1423, 1421, 1487, 1487,

     1472, 1487,  214, 1487, 1487, 1471,  326, 1487, 1487, 1470,
      355, 1487, 1487, 1469, 1487,  394, 1487,    0, 1487, 1487,
     1487, 1429, 1415, 1422, 1487, 1487,    0, 1487, 1487, 1487,
      433, 1487, 1439, 1444, 1434, 1433, 1445, 1444, 1420, 1414,
     1487, 1487,    0, 1487, 1449, 1440,    0, 1487,  443, 1439,
     1487, 1487, 1454,  328,  455,  356,    0, 1487, 1453,  367,
      465,  379, 1487, 1487,    0, 1487, 1487, 1487,  452, 1413,
     1487, 1487, 1451, 1487,  498, 1487, 1487, 1450, 1487,  504,
     1487, 1487,    0, 1449, 1487, 1487, 1487, 1487, 1487, 1487,
        0, 1448, 1487, 1487, 1487,  514, 1487, 1487, 1487, 1447,

     1487, 1487,  515,    0,    0, 1487,  520, 1487,    0, 1487,
     1487,  521, 1487, 1487, 1487, 1487, 1487, 1446,  526, 1487,
        0, 1487, 1487, 1487, 1487, 1487, 1487, 1445, 1487, 1487,
        0, 1487, 1487, 1487, 1487, 1487, 1487,    0, 1487, 1442,
        0, 1487, 1487, 1416, 1442,  527,  391, 1487, 1487,    0,
     1487,    0, 1401, 1389, 1382, 1386, 1381, 1385, 1383, 1388,
      136, 1383, 1379, 1373, 1367,    0,  216, 1346, 1338,    0,
     1346, 1347, 1337, 1331, 1325, 1319,  293, 1284,    0, 1487,
     1308,    0,    0,    0, 1303,  529,  487,    0,    0,  552,
      554,    0,    0,    0, 1329,    0, 1324,    0,    0,    0,

        0, 1323,    0,    0, 1487, 1289, 1487, 1254, 1251, 1263,
     1249,    0, 1242, 1232, 1233, 1223, 1212, 1213, 1220, 1211,
     1215, 1230,  498, 1200, 1188, 1215, 1209, 1188, 1196, 1178,
     1173, 1180,  536, 1142, 1175, 1174, 1487, 1487,  566,    0,
     1137, 1131, 1119, 1119, 1114, 1125, 1116, 1121, 1111, 1105,
     1103,    0, 1119, 1116,  642,  572,  605,  633,  624,  575,
      630,  589,  591,  629,  626,  635,  598,  612,  610, 1487,
      595,    0,  604,    0,  538,    0,  604,  604,  589,  604,
      603,  591,  621,  620,  600, 1487,  587,  600,  611, 1487,
      607, 1487, 1487,  615,  614,  594,  581,  598,  592, 1487,

        0,  562,    0,    0,    0,  546,  548,  540,  543,  529,
      474,  606, 1487,  476,  453,  427,  422,  413,  612,  549,
      589,  383,  381,  351,  340,  342,  333,    0, 1487,    0,
      288,  285,  257,  255, 1487, 1487,  263, 1487,  246, 1487,
      219,    0,    0,    0,    0,    0,  217,  622, 1487, 1487,
     1487, 1487,    0,  209, 1487,  177,  162,  136,   26, 1487,
     1487,  663,  683,  703,  723,  743,  763,  783,  803,  823,
      843,  863,  883,  903,  923,  943,  963,  983, 1003, 1023,
     1043, 1063, 1083, 1103, 1123, 1143, 1155, 1174, 1193, 1212,
     1232, 1244, 1263, 1283, 1303, 1315, 1334, 1354, 1374, 1393,

     1413,  609,  619,  621
    } ;

static yyconst flex_int16_t yy_def[505] =
    {   0,
      462,  462,  461,    3,  463,  463,  464,  464,  465,  465,
      466,  466,  467,  467,  468,  468,  469,  469,  470,  470,
       16,   16,  471,  471,  472,  472,  467,  467,    3,    3,
      473,  473,  473,  473,  474,  474,  475,  475,  476,  476,
      476,  476,  477,  477,  477,  477,  478,  478,  479,  479,
      480,  480,  480,  480,  481,  481,  482,  482,  482,  482,
      483,  483,  484,  484,  484,  484,    3,    3,  485,  485,
      461,  486,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  461,  461,

      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  488,  461,  461,
      461,  488,  488,  488,  461,  461,  489,  461,  461,  461,
      461,  461,  461,  489,  461,  461,  461,  461,  461,  461,
      461,  461,  490,  461,  461,  461,  491,  461,  491,  461,
      461,  461,  461,  461,  461,  461,  492,  461,  461,  461,
      461,  461,  461,  461,  493,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  494,  494,  461,  461,  461,  461,  461,  461,
      495,  495,  461,  461,  461,  461,  461,  461,  461,  461,

      461,  461,  461,  496,  497,  461,  461,  461,  498,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      499,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      500,  461,  461,  461,  461,  461,  461,  501,  461,  461,
      486,  461,  461,  461,  461,  461,  461,  461,  461,  502,
      461,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  488,  488,  488,  488,  489,
      461,  489,  461,  461,  461,  461,  461,  461,  490,  461,
      461,  491,  491,  491,  461,  461,  461,  503,  492,  461,
      461,  504,  493,  494,  494,  495,  495,  496,  497,  498,

      499,  461,  500,  501,  461,  461,  461,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  488,  488,  488,  488,  461,  489,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  488,  488,  488,  488,  488,  461,  489,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  488,  488,  488,  461,  488,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,

      487,  487,  487,  487,  487,  487,  487,  487,  488,  488,
      488,  488,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  487,  487,  487,  487,  488,  488,  488,  461,  488,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      487,  487,  487,  487,  488,  488,  461,  461,  461,  461,
      461,  461,  487,  461,  461,  461,  461,  461,  461,  461,
        0,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,

      461,  461,  461,  461
    } ;

static yyconst flex_int16_t yy_nxt[1552] =
    {   0,
      461,  461,   73,   74,   73,   74,  461,  114,   80,   75,
      115,   75,  239,  114,   80,  116,  115,  239,  461,  144,
      144,  116,  148,  145,  145,  148,  461,  206,  461,  149,
      159,   80,  149,   76,  207,   76,  160,  206,  208,  161,
      162,  228,  229,  117,  207,  228,  229,  240,  208,  117,
      146,  146,  240,  150,  230,  460,  150,   77,  230,   77,
       78,   79,   80,   78,   81,   82,   83,   84,   83,   85,
       86,   87,   88,   83,   83,   83,   78,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   78,   78,   78,

       89,   89,   89,   90,   91,   89,   92,   89,   89,   93,
       94,   89,   89,   89,   89,   89,   95,   96,   97,   98,
       89,   89,   81,   99,  101,   80,  164,  102,  101,   80,
      262,  102,  103,  106,   80,  164,  103,  106,   80,  110,
       80,  107,  110,   80,  232,  107,  263,  111,  236,  236,
      111,  119,  120,  119,  120,  253,  233,  234,  232,  119,
      254,  119,  242,  159,   80,  243,  121,  459,  121,  160,
      233,  234,  161,  162,  232,  184,   80,  316,  185,  186,
      119,  120,  187,  188,   78,  104,  233,  235,  119,  104,
      122,  317,  122,   78,  108,  121,  458,  123,  108,  123,

      112,  248,  210,  112,  249,  124,  237,  124,  211,  212,
      457,  222,  125,  126,  125,  126,  128,  129,  130,  122,
      248,  119,  120,  249,  131,  166,  123,  167,  168,  119,
      456,  132,  169,  133,  124,  134,  121,  213,  322,  214,
      135,  125,  163,  323,  136,  222,  128,  128,  454,  128,
      137,  138,  246,  247,  166,  139,  167,  168,  247,  247,
      122,  169,  166,  170,  167,  171,  453,  123,  452,  169,
      140,  223,  224,  236,  236,  124,  222,  141,  142,  128,
      129,  130,  125,  163,  210,  451,  166,  131,  167,  171,
      211,  212,  170,  169,  132,  450,  133,  449,  134,  222,

      170,  247,  247,  135,  232,  223,  224,  136,  250,  128,
      128,  448,  128,  137,  138,  332,  233,  235,  139,  213,
      333,  214,  173,   80,  170,  174,  173,   80,  447,  174,
      175,  237,  248,  140,  175,  249,  225,  226,  286,  287,
      141,  142,  152,  153,   80,  152,  152,  152,  152,  154,
      152,  152,  155,  156,  152,  152,  152,  152,  152,  225,
      226,  248,  178,   80,  249,  179,  287,  287,  184,   80,
      180,  185,  186,  446,  181,  187,  188,  290,  291,  152,
      152,  152,  445,  176,  444,  178,   80,  176,  179,  291,
      291,  184,   80,  180,  185,  189,  443,  181,  190,  188,

      248,  247,  247,  249,  152,  152,  152,  153,   80,  152,
      152,  152,  152,  154,  152,  152,  155,  156,  152,  152,
      152,  152,  152,  182,  184,   80,  442,  185,  189,  259,
      260,  190,  188,  192,   80,  441,  193,  194,  261,  242,
      195,  196,  243,  152,  152,  152,  182,  192,   80,  283,
      193,  194,  284,  435,  195,  196,  192,   80,  248,  193,
      197,  249,  434,  198,  196,  287,  287,  433,  152,  152,
      192,   80,  432,  193,  197,  291,  291,  198,  196,  199,
      200,   80,  199,  199,  201,  199,  199,  202,  203,  199,
      199,  199,  199,  199,  199,  199,  210,  287,  287,  210,

      218,   80,  215,  212,  248,  215,  212,  249,  219,  431,
      248,  218,   80,  249,  428,  288,  199,  199,  199,  219,
      248,  248,  354,  249,  249,  292,  248,  248,  355,  249,
      249,  213,  248,  216,  213,  249,  216,  247,  247,  287,
      287,  199,  199,  199,  200,   80,  199,  199,  201,  199,
      199,  202,  203,  199,  199,  199,  199,  199,  199,  199,
      365,  220,  291,  291,  291,  291,  366,  370,  370,  427,
      370,  437,  220,  386,  386,  370,  390,  390,  438,  390,
      199,  199,  199,  426,  390,  425,  371,  250,  402,  288,
      392,  392,  393,  393,  375,  393,  400,  400,  392,  424,

      393,  413,  413,  423,  400,  199,  199,  429,  429,  413,
      430,  439,  292,  436,  436,  422,  436,  307,  440,  430,
      307,  436,  421,  455,  455,  436,  455,  337,  420,  338,
      337,  455,  338,  419,  418,  417,  416,  415,  414,  412,
      411,  410,  409,  408,  407,  406,  405,  404,  403,  401,
      399,  392,  398,  397,  396,  395,  394,  391,  389,  388,
      387,  385,  413,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,

      100,  100,  100,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,

      127,  127,  127,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,

      165,  165,  165,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,

      204,  204,  204,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,

      227,  227,  227,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  241,  241,  384,  383,  241,  241,  241,
      382,  241,  241,  241,  241,  241,  241,  381,  241,  241,
      241,  380,  241,  252,  379,  378,  252,  252,  252,  252,
      377,  376,  252,  252,  266,  375,  374,  266,  266,  266,
      266,  373,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  270,  372,  369,  368,  270,  270,  270,

      367,  270,  270,  270,  364,  270,  363,  270,  270,  270,
      362,  270,  279,  279,  361,  279,  279,  360,  279,  279,
      279,  279,  279,  279,  279,  279,  359,  279,  279,  279,
      279,  279,  282,  282,  358,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  357,  282,  282,  282,
      282,  282,  289,  356,  353,  289,  289,  289,  289,  352,
      351,  289,  289,  293,  293,  350,  293,  349,  293,  293,
      348,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      347,  293,  293,  294,  294,  346,  294,  345,  294,  344,
      343,  294,  294,  294,  294,  294,  294,  294,  294,  294,

      294,  294,  294,  296,  296,  342,  296,  341,  296,  340,
      339,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  298,  302,  297,  298,  298,  298,  298,
      295,  336,  298,  298,  299,  299,  335,  299,  299,  299,
      299,  334,  299,  331,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  300,  300,  330,  300,  300,  300,
      329,  328,  300,  300,  300,  300,  300,  300,  300,  327,
      300,  300,  300,  300,  301,  301,  326,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  303,  303,  325,  303,  303,  303,  303,

      303,  303,  303,  324,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  304,  304,  304,  321,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  320,
      304,  304,  304,  319,  318,  315,  314,  313,  312,  311,
      310,  309,  308,  245,  306,  305,  302,  245,  245,  297,
      295,  245,  245,  277,  245,  245,  285,  281,  280,  278,
      277,  276,  275,  274,  273,  272,  271,  269,  268,  267,
      245,  245,  245,  245,  265,  264,  258,  257,  256,  255,
      251,  245,  244,  461,  151,  151,   71,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,

      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461
    } ;

static yyconst flex_int16_t yy_chk[1552] =
    {   0,
        0,    0,    1,    1,    2,    2,    0,   11,   11,    1,
       11,    2,   69,   12,   12,   11,   12,   70,    0,   17,
       18,   12,   19,   17,   18,   20,    0,   49,    0,   19,
       25,   25,   20,    1,   49,    2,   25,   50,   49,   25,
       25,   61,   61,   11,   50,   62,   62,   69,   50,   12,
       17,   18,   70,   19,   61,  459,   20,    1,   62,    2,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    5,    5,   29,    5,    6,    6,
       96,    6,    5,    7,    7,   30,    6,    8,    8,    9,
        9,    7,   10,   10,   63,    8,   96,    9,   67,   67,
       10,   13,   13,   14,   14,   90,   63,   63,   64,   13,
       90,   14,   75,   26,   26,   75,   13,  458,   14,   26,
       64,   64,   26,   26,   65,   39,   39,  261,   39,   39,
       27,   27,   39,   39,   29,    5,   65,   65,   27,    6,
       13,  261,   14,   30,    7,   27,  457,   13,    8,   14,

        9,   85,   51,   10,   85,   13,   67,   14,   51,   51,
      456,   57,   13,   13,   14,   14,   15,   15,   15,   27,
      103,   28,   28,  103,   15,   31,   27,   31,   31,   28,
      454,   15,   31,   15,   27,   15,   28,   51,  267,   51,
       15,   27,   27,  267,   15,   58,   15,   15,  447,   15,
       15,   15,   84,   84,   32,   15,   32,   32,   86,   86,
       28,   32,   33,   31,   33,   33,  441,   28,  439,   33,
       15,   57,   57,   68,   68,   28,   59,   15,   15,   16,
       16,   16,   28,   28,   52,  437,   34,   16,   34,   34,
       52,   52,   32,   34,   16,  434,   16,  433,   16,   60,

       33,   87,   87,   16,   66,   58,   58,   16,   86,   16,
       16,  432,   16,   16,   16,  277,   66,   66,   16,   52,
      277,   52,   35,   35,   34,   35,   36,   36,  431,   36,
       35,   68,  107,   16,   36,  107,   59,   59,  154,  154,
       16,   16,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   60,
       60,  111,   37,   37,  111,   37,  156,  156,   40,   40,
       37,   40,   40,  427,   37,   40,   40,  160,  160,   23,
       23,   23,  426,   35,  425,   38,   38,   36,   38,  162,
      162,   41,   41,   38,   41,   41,  424,   38,   41,   41,

      116,  247,  247,  116,   23,   23,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   37,   42,   42,  423,   42,   42,   95,
       95,   42,   42,   43,   43,  422,   43,   43,   95,  131,
       43,   43,  131,   24,   24,   24,   38,   44,   44,  149,
       44,   44,  149,  418,   44,   44,   45,   45,  169,   45,
       45,  169,  417,   45,   45,  155,  155,  416,   24,   24,
       46,   46,  415,   46,   46,  161,  161,   46,   46,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   53,  287,  287,   54,

       55,   55,   53,   53,  175,   54,   54,  175,   55,  414,
      180,   56,   56,  180,  411,  155,   47,   47,   47,   56,
      196,  203,  323,  196,  203,  161,  207,  212,  323,  207,
      212,   53,  219,   53,   54,  219,   54,  246,  246,  286,
      286,   47,   47,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
      333,   55,  290,  290,  291,  291,  333,  339,  339,  410,
      339,  420,   56,  356,  356,  339,  360,  360,  420,  360,
       48,   48,   48,  409,  360,  408,  339,  246,  375,  286,
      362,  362,  363,  363,  375,  363,  371,  371,  362,  407,

      363,  388,  388,  406,  371,   48,   48,  412,  412,  388,
      412,  421,  290,  419,  419,  402,  419,  502,  421,  412,
      502,  419,  399,  448,  448,  419,  448,  503,  398,  504,
      503,  448,  504,  397,  396,  395,  394,  391,  389,  387,
      385,  384,  383,  382,  381,  380,  379,  378,  377,  373,
      369,  362,  368,  367,  366,  365,  364,  361,  359,  358,
      357,  355,  388,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,

      463,  463,  463,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,

      468,  468,  468,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  473,

      473,  473,  473,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,

      478,  478,  478,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  486,  486,  354,  353,  486,  486,  486,
      351,  486,  486,  486,  486,  486,  486,  350,  486,  486,
      486,  349,  486,  487,  348,  347,  487,  487,  487,  487,
      346,  345,  487,  487,  488,  344,  343,  488,  488,  488,
      488,  342,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  489,  341,  336,  335,  489,  489,  489,

      334,  489,  489,  489,  332,  489,  331,  489,  489,  489,
      330,  489,  490,  490,  329,  490,  490,  328,  490,  490,
      490,  490,  490,  490,  490,  490,  327,  490,  490,  490,
      490,  490,  491,  491,  326,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  325,  491,  491,  491,
      491,  491,  492,  324,  322,  492,  492,  492,  492,  321,
      320,  492,  492,  493,  493,  319,  493,  318,  493,  493,
      317,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      316,  493,  493,  494,  494,  315,  494,  314,  494,  313,
      311,  494,  494,  494,  494,  494,  494,  494,  494,  494,

      494,  494,  494,  495,  495,  310,  495,  309,  495,  308,
      306,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  496,  302,  297,  496,  496,  496,  496,
      295,  285,  496,  496,  497,  497,  281,  497,  497,  497,
      497,  278,  497,  276,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  498,  498,  275,  498,  498,  498,
      274,  273,  498,  498,  498,  498,  498,  498,  498,  272,
      498,  498,  498,  498,  499,  499,  271,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  500,  500,  269,  500,  500,  500,  500,

      500,  500,  500,  268,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  501,  501,  501,  265,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  264,
      501,  501,  501,  263,  262,  260,  259,  258,  257,  256,
      255,  254,  253,  245,  244,  240,  228,  218,  200,  192,
      184,  178,  173,  170,  159,  153,  150,  146,  145,  140,
      139,  138,  137,  136,  135,  134,  133,  124,  123,  122,
      114,  110,  106,  101,   98,   97,   94,   93,   92,   91,
       88,   79,   76,   71,   22,   21,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,

      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "./scan.ll"
/* -*-fundamental-*- */
/* $Id: scan.ll,v 1.3 2006/05/31 16:30:36 max Exp $ */
/*
 *
 * Copyright (C) 2005 Max Krohn (my last name AT mit DOT edu)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA
 *
 */
#line 26 "./scan.ll"
#define YYSTYPE YYSTYPE
#include "tame.h"
#include "parse.h"

#define YY_NO_UNPUT
#define YY_SKIP_YYWRAP
#define yywrap() 1

str filename = "(stdin)";
int lineno = 1;
static void switch_to_state (int i);
static int std_ret (int i);
static int tame_ret (int s, int t);
int get_yy_lineno () { return lineno ;}
str get_yy_loc ();
int tame_on = 1;
int gobble_flag =0;
int lineno_return ();
int loc_return ();
int filename_return ();

#define GOBBLE_RET if (!gobble_flag) return std_ret (T_PASSTHROUGH)









#line 1013 "lex.yy.c"

#define INITIAL 0
#define FULL_PARSE 1
#define FN_ENTER 2
#define VARS_ENTER 3
#define BLOCK_ENTER 4
#define CB_ENTER 5
#define EXPECT_CB 6
#define TAME_BASE 7
#define C_COMMENT 8
#define CXX_COMMENT 9
#define TAME 10
#define ID_OR_NUM 11
#define NUM_ONLY 12
#define EXPECT_CB_BASE 13
#define HALF_PARSE 14
#define PP 15
#define PP_BASE 16
#define NONBLOCK_ENTER 17
#define JOIN_ENTER 18
#define JOIN_LIST 19
#define JOIN_LIST_BASE 20
#define EXPR_LIST 21
#define EXPR_LIST_BASE 22
#define ID_LIST 23
#define RETURN_PARAMS 24
#define EXPR_LIST_BR 25
#define EXPR_LIST_BR_BASE 26
#define DEFRET_ENTER 27
#define DEFRET_BASE 28
#define DEFRET 29
#define TEMPLATE_ENTER 30
#define TEMPLATE 31
#define TEMPLATE_BASE 32
#define SIG_PARSE 33
#define QUOTE 34

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 68 "./scan.ll"


#line 1213 "lex.yy.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 462 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1487 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 71 "./scan.ll"
++lineno;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 72 "./scan.ll"
/*discard*/;
	YY_BREAK


case 3:
YY_RULE_SETUP
#line 76 "./scan.ll"
{ yy_pop_state (); return std_ret (T_ID); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 77 "./scan.ll"
{ yy_pop_state (); return std_ret (T_NUM); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 78 "./scan.ll"
{ return yyerror ("expected an identifier or a number"); }
	YY_BREAK



case 6:
YY_RULE_SETUP
#line 83 "./scan.ll"
{ yy_pop_state (); return std_ret (T_NUM); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 84 "./scan.ll"
{ return yyerror ("expected a number"); }
	YY_BREAK


case 8:
YY_RULE_SETUP
#line 89 "./scan.ll"
return T_CONST;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 90 "./scan.ll"
return T_STRUCT;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 91 "./scan.ll"
return T_TYPENAME;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 92 "./scan.ll"
return T_VOID;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 93 "./scan.ll"
return T_CHAR;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 94 "./scan.ll"
return T_SHORT;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 95 "./scan.ll"
return T_INT;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 96 "./scan.ll"
return T_LONG;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 97 "./scan.ll"
return T_FLOAT;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 98 "./scan.ll"
return T_DOUBLE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 99 "./scan.ll"
return T_SIGNED;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 100 "./scan.ll"
return T_UNSIGNED;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 101 "./scan.ll"
return T_STATIC;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 102 "./scan.ll"
return T_LONG_LONG;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 103 "./scan.ll"
{ yy_push_state (TEMPLATE_ENTER); return T_TEMPLATE; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 105 "./scan.ll"
{ return std_ret (T_ID); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 106 "./scan.ll"
{ return std_ret (T_NUM); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 108 "./scan.ll"
{ yy_pop_state (); return yytext[0]; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 110 "./scan.ll"
{ return yytext[0]; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 111 "./scan.ll"
{ return T_2COLON; }
	YY_BREAK


case 28:
YY_RULE_SETUP
#line 115 "./scan.ll"
{ yy_pop_state (); return yytext[0]; }
	YY_BREAK


case 29:
YY_RULE_SETUP
#line 119 "./scan.ll"
{ return yytext[0]; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 120 "./scan.ll"
{ switch_to_state (TAME_BASE); return yytext[0]; }
	YY_BREAK


case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 124 "./scan.ll"
++lineno;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 125 "./scan.ll"
/* discard */ ;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 126 "./scan.ll"
{ switch_to_state (TEMPLATE_BASE); return yytext[0]; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 127 "./scan.ll"
{ return yyerror ("unexpected token after 'template'"); }
	YY_BREAK


case 35:
YY_RULE_SETUP
#line 131 "./scan.ll"
{ yy_pop_state (); return yytext[0]; }
	YY_BREAK


case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 135 "./scan.ll"
{ ++lineno; return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 136 "./scan.ll"
{ yy_push_state (TEMPLATE); return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 137 "./scan.ll"
{ return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 39:
YY_RULE_SETUP
#line 141 "./scan.ll"
{ yy_pop_state (); return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 40:
YY_RULE_SETUP
#line 145 "./scan.ll"
{ yy_push_state (PP_BASE); return yytext[0]; }
	YY_BREAK


case 41:
YY_RULE_SETUP
#line 149 "./scan.ll"
{ yy_push_state (FULL_PARSE); return yytext[0]; }
	YY_BREAK


case 42:
YY_RULE_SETUP
#line 153 "./scan.ll"
{ return yyerror ("illegal token found in parsed "
				  "environment"); }
	YY_BREAK


case 43:
YY_RULE_SETUP
#line 158 "./scan.ll"
{ yy_push_state (FULL_PARSE); return yytext[0]; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 159 "./scan.ll"
{ switch_to_state (TAME_BASE); return yytext[0]; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 160 "./scan.ll"
{ return yyerror ("illegal token found in function "
				  "environment"); }
	YY_BREAK


case 46:
YY_RULE_SETUP
#line 165 "./scan.ll"
{ yy_pop_state (); return yytext[0]; } 
	YY_BREAK


case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 169 "./scan.ll"
{ ++lineno; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 170 "./scan.ll"
{ return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 171 "./scan.ll"
{ yy_push_state (PP); return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 50:
YY_RULE_SETUP
#line 175 "./scan.ll"
{ return lineno_return (); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 176 "./scan.ll"
{ return filename_return (); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 177 "./scan.ll"
{ return loc_return (); }
	YY_BREAK


case 53:
YY_RULE_SETUP
#line 181 "./scan.ll"
{ yy_pop_state (); return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 54:
YY_RULE_SETUP
#line 186 "./scan.ll"
{ switch_to_state (HALF_PARSE); return yytext[0]; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 187 "./scan.ll"
{ return yyerror ("illegal token found between VARS and '{'");}
	YY_BREAK


case 56:
YY_RULE_SETUP
#line 191 "./scan.ll"
{ switch_to_state (EXPECT_CB_BASE); return yytext[0]; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 192 "./scan.ll"
{ return yyerror ("illegal token found between BLOCK "
				  "and '{'");}
	YY_BREAK


case 58:
YY_RULE_SETUP
#line 197 "./scan.ll"
{ yy_push_state (EXPR_LIST_BASE); return yytext[0]; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 198 "./scan.ll"
{ switch_to_state (EXPECT_CB_BASE); return yytext[0]; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 199 "./scan.ll"
{ return yyerror ("illegal token found between NONBLOCK "
				  "and '{'");}
	YY_BREAK


case 61:
YY_RULE_SETUP
#line 204 "./scan.ll"
{ yy_push_state (JOIN_LIST_BASE); return yytext[0]; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 205 "./scan.ll"
{ switch_to_state (TAME_BASE); return yytext[0]; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 206 "./scan.ll"
{ yy_pop_state (); return yytext[0]; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 207 "./scan.ll"
{ return yyerror ("illegal token found between NONBLOCK "
				  "and '{'");}
	YY_BREAK


case 65:
YY_RULE_SETUP
#line 212 "./scan.ll"
{ yy_push_state (JOIN_LIST); return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 213 "./scan.ll"
{ return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 67:
YY_RULE_SETUP
#line 217 "./scan.ll"
{ yy_pop_state (); return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 218 "./scan.ll"
{ return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 69:
YY_RULE_SETUP
#line 222 "./scan.ll"
{ switch_to_state (ID_LIST); return yytext[0]; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 223 "./scan.ll"
{ yy_pop_state (); return yytext[0]; }
	YY_BREAK


case 71:
YY_RULE_SETUP
#line 228 "./scan.ll"
{ switch_to_state (EXPR_LIST_BASE); return yytext[0]; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 229 "./scan.ll"
{ yy_push_state (EXPR_LIST_BR_BASE); return yytext[0]; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 230 "./scan.ll"
{ return yyerror ("illegal token found between '@' and '('"); }
	YY_BREAK


case 74:
YY_RULE_SETUP
#line 234 "./scan.ll"
{ switch_to_state (DEFRET_BASE); return yytext[0]; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 235 "./scan.ll"
{ return yyerror ("Expected '{' after DEFAULT_RETURN"); }
	YY_BREAK


case 76:
YY_RULE_SETUP
#line 239 "./scan.ll"
{ yy_pop_state (); return yytext[0]; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 240 "./scan.ll"
{ yy_push_state (DEFRET); return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 78:
YY_RULE_SETUP
#line 244 "./scan.ll"
{ yy_push_state (DEFRET); return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 245 "./scan.ll"
{ yy_pop_state (); return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 249 "./scan.ll"
{ ++lineno; return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 250 "./scan.ll"
{ return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 82:
YY_RULE_SETUP
#line 254 "./scan.ll"
{ yy_pop_state (); return yytext[0]; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 255 "./scan.ll"
{ return yytext[0]; }
	YY_BREAK


case 84:
YY_RULE_SETUP
#line 259 "./scan.ll"
{ yy_pop_state (); return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 260 "./scan.ll"
{ return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 86:
YY_RULE_SETUP
#line 264 "./scan.ll"
{ yy_push_state (EXPR_LIST_BR); 
	             return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 266 "./scan.ll"
{ return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 267 "./scan.ll"
{ ++lineno; return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 89:
YY_RULE_SETUP
#line 271 "./scan.ll"
{ return std_ret (T_ID); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 272 "./scan.ll"
{ return yytext[0]; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 273 "./scan.ll"
{ yy_pop_state (); return yytext[0]; }
	YY_BREAK


case 92:
YY_RULE_SETUP
#line 277 "./scan.ll"
{ yy_push_state (EXPR_LIST); return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 278 "./scan.ll"
{ return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 94:
YY_RULE_SETUP
#line 282 "./scan.ll"
{ return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 283 "./scan.ll"
{ yy_pop_state (); return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 96:
YY_RULE_SETUP
#line 287 "./scan.ll"
{ yy_pop_state (); return yytext[0]; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 288 "./scan.ll"
{ return yytext[0]; }
	YY_BREAK


case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 292 "./scan.ll"
{ ++lineno; return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 293 "./scan.ll"
{ return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 294 "./scan.ll"
{ yy_push_state (CB_ENTER); return yytext[0]; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 295 "./scan.ll"
{ yy_push_state (EXPECT_CB); return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 102:
/* rule 102 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 296 "./scan.ll"
{ return yyerror ("cannot goto from within a BLOCK or "
				  "NONBLOCK environment"); }
	YY_BREAK
case 103:
/* rule 103 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 298 "./scan.ll"
{ return yyerror ("cannot return from within a BLOCK or "
				   "NONBLOCK environment."); }
	YY_BREAK


case 104:
YY_RULE_SETUP
#line 304 "./scan.ll"
{ yy_pop_state (); return yytext[0]; }
	YY_BREAK


case 105:
YY_RULE_SETUP
#line 308 "./scan.ll"
{ yy_pop_state (); return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 312 "./scan.ll"
{ yylval.str = yytext; ++lineno; return T_PASSTHROUGH; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 313 "./scan.ll"
{ return tame_ret (CB_ENTER, '@'); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 315 "./scan.ll"
{ yylval.str = yytext; 
	 			          return T_PASSTHROUGH; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 318 "./scan.ll"
{ yylval.str = yytext; yy_push_state (TAME); 
		  return T_PASSTHROUGH; }
	YY_BREAK
case 110:
/* rule 110 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 321 "./scan.ll"
{ return tame_ret (VARS_ENTER, T_VARS); }
	YY_BREAK
case 111:
/* rule 111 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 322 "./scan.ll"
{ return tame_ret (BLOCK_ENTER, T_BLOCK); }
	YY_BREAK
case 112:
/* rule 112 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 323 "./scan.ll"
{ return tame_ret (NONBLOCK_ENTER, T_NONBLOCK); }
	YY_BREAK
case 113:
/* rule 113 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 324 "./scan.ll"
{ return tame_ret (JOIN_ENTER, T_JOIN); }
	YY_BREAK
case 114:
/* rule 114 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 325 "./scan.ll"
{ return tame_ret (JOIN_ENTER, T_WAIT); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 326 "./scan.ll"
{ return tame_ret (DEFRET_ENTER, T_DEFAULT_RETURN); }
	YY_BREAK
case 116:
/* rule 116 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 328 "./scan.ll"
{ yy_push_state (RETURN_PARAMS); return T_RETURN; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 330 "./scan.ll"
{ yy_push_state (QUOTE); return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 334 "./scan.ll"
{ return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 335 "./scan.ll"
{ return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 336 "./scan.ll"
{ yy_pop_state (); return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 121:
YY_RULE_SETUP
#line 340 "./scan.ll"
{ yylval.str = yytext; yy_pop_state ();
	    	  return T_PASSTHROUGH; }
	YY_BREAK


case 122:
YY_RULE_SETUP
#line 345 "./scan.ll"
{ yy_pop_state (); return yytext[0]; }
	YY_BREAK


case 123:
YY_RULE_SETUP
#line 350 "./scan.ll"
{ yy_push_state (CXX_COMMENT); gobble_flag = 0;
	          return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 352 "./scan.ll"
{ yy_push_state (C_COMMENT); gobble_flag = 0;
	          return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 125:
/* rule 125 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 357 "./scan.ll"
{ return tame_ret (SIG_PARSE, T_TAMED); }
	YY_BREAK
case 126:
/* rule 126 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 358 "./scan.ll"
{ return tame_ret (FN_ENTER, T_TAME); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 359 "./scan.ll"
{ yylval.str = yytext; return T_PASSTHROUGH ; }
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 360 "./scan.ll"
{ ++lineno; yylval.str = yytext; return T_PASSTHROUGH; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 361 "./scan.ll"
{ yy_push_state (QUOTE); return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 365 "./scan.ll"
{ ++lineno; yy_pop_state (); GOBBLE_RET; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 366 "./scan.ll"
{ yy_push_state (CXX_COMMENT); gobble_flag = 0;
	          return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 368 "./scan.ll"
{ yy_push_state (C_COMMENT); gobble_flag = 0;
	          return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 370 "./scan.ll"
{ GOBBLE_RET; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 371 "./scan.ll"
{ tame_on = 0; GOBBLE_RET; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 372 "./scan.ll"
{ tame_on = 1; GOBBLE_RET; }
	YY_BREAK


case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 376 "./scan.ll"
{ ++lineno; return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 377 "./scan.ll"
{ yy_pop_state (); return yytext[0]; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 378 "./scan.ll"
{ return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 139:
YY_RULE_SETUP
#line 382 "./scan.ll"
{ tame_on = 0; GOBBLE_RET; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 383 "./scan.ll"
{ tame_on = 1; GOBBLE_RET; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 384 "./scan.ll"
{ yy_pop_state (); GOBBLE_RET; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 385 "./scan.ll"
{ GOBBLE_RET; }
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 386 "./scan.ll"
{ ++lineno; yylval.str = yytext; GOBBLE_RET; }
	YY_BREAK


case 144:
YY_RULE_SETUP
#line 392 "./scan.ll"
{ gobble_flag = 1; yy_push_state (CXX_COMMENT); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 393 "./scan.ll"
{ gobble_flag = 1; yy_push_state (C_COMMENT); }
	YY_BREAK

case 146:
YY_RULE_SETUP
#line 397 "./scan.ll"
ECHO;
	YY_BREAK
#line 2194 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(FULL_PARSE):
case YY_STATE_EOF(FN_ENTER):
case YY_STATE_EOF(VARS_ENTER):
case YY_STATE_EOF(BLOCK_ENTER):
case YY_STATE_EOF(CB_ENTER):
case YY_STATE_EOF(EXPECT_CB):
case YY_STATE_EOF(TAME_BASE):
case YY_STATE_EOF(C_COMMENT):
case YY_STATE_EOF(CXX_COMMENT):
case YY_STATE_EOF(TAME):
case YY_STATE_EOF(ID_OR_NUM):
case YY_STATE_EOF(NUM_ONLY):
case YY_STATE_EOF(EXPECT_CB_BASE):
case YY_STATE_EOF(HALF_PARSE):
case YY_STATE_EOF(PP):
case YY_STATE_EOF(PP_BASE):
case YY_STATE_EOF(NONBLOCK_ENTER):
case YY_STATE_EOF(JOIN_ENTER):
case YY_STATE_EOF(JOIN_LIST):
case YY_STATE_EOF(JOIN_LIST_BASE):
case YY_STATE_EOF(EXPR_LIST):
case YY_STATE_EOF(EXPR_LIST_BASE):
case YY_STATE_EOF(ID_LIST):
case YY_STATE_EOF(RETURN_PARAMS):
case YY_STATE_EOF(EXPR_LIST_BR):
case YY_STATE_EOF(EXPR_LIST_BR_BASE):
case YY_STATE_EOF(DEFRET_ENTER):
case YY_STATE_EOF(DEFRET_BASE):
case YY_STATE_EOF(DEFRET):
case YY_STATE_EOF(TEMPLATE_ENTER):
case YY_STATE_EOF(TEMPLATE):
case YY_STATE_EOF(TEMPLATE_BASE):
case YY_STATE_EOF(SIG_PARSE):
case YY_STATE_EOF(QUOTE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 462 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 462 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 461);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 397 "./scan.ll"



void
switch_to_state (int s)
{
	yy_pop_state ();
	yy_push_state (s);
}

int
yyerror (str msg)
{
  warnx << filename << ":" << lineno << ": " << msg << "\n";
  exit (1);
}

int
yywarn (str msg)
{
  warnx << filename << ":" << lineno << ": Warning: " << msg << "\n";
  return 0;
}

int
std_ret (int i)
{
  yylval.str = yytext;
  return i;
}

void
gcc_hack_use_static_functions ()
{
  assert (false);
  (void )yy_top_state ();
}

int
tame_ret (int s, int t)
{
  if (tame_on) {
    yy_push_state (s);
    return t;
  } else {
    return std_ret (T_PASSTHROUGH);
  }
}

str
get_yy_loc ()
{
   strbuf b (filename);
   b << ":" << lineno;
   return b;
}

int
lineno_return ()
{
   strbuf b; 
   b << lineno; 
   yylval.str = lstr (lineno, str (b));
   return T_PASSTHROUGH;
}

int
filename_return ()
{
  strbuf b; 
  b << "\"" << filename << "\"";
  yylval.str = lstr (lineno, str (b));
  return T_PASSTHROUGH; 
}

int
loc_return ()
{
   strbuf b ("\"%s:%d\"", filename.cstr (), lineno);
  yylval.str = lstr (lineno, str (b));
  return T_PASSTHROUGH; 
}

