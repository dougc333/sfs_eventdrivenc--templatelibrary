.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SFS_ENVIRON 7"
.TH SFS_ENVIRON 7 "2006-07-20" "SFS 0.8pre" "SFS 0.8pre"
.SH "NAME"
sfs_environ \- SFS environment variables
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The following environment variables affect many of \s-1SFS\s0's component
programs.  (Note that for security reasons, the setuid programs
\&\fBsuidconnect\fR and \fBnewaid\fR interpret some of these
slightly differently\*(--ignoring some and dropping privilege if others
are set.)
.IP "\s-1ACLNT_TRACE\s0" 4
.IX Item "ACLNT_TRACE"
Used mostly for debugging, \fI\s-1ACLNT_TRACE\s0\fR causes most \s-1SFS\s0 commands
to print a trace of all the RPCs they make.  The environment variable
must be set to an integer.  The higher the value, the more trace
information.  The value 1 causes only anomalous situations such as
retransmissions to be reported.  2 causes every \s-1RPC\s0 to be printed.  4
causes both \s-1RPC\s0 calls and replies to be printed.  Arguments over 5
cause the actual \s-1RPC\s0 argument and result data structures to be
pretty-printed-the higher the number the greater the depth to which
recursive data structures will be expanded.  A value of 10 is
generally sufficient to get a very complete \s-1RPC\s0 trace.
.IP "\s-1ACLNT_TIME\s0" 4
.IX Item "ACLNT_TIME"
A boolean value.  When this environment variable and \fI\s-1ACLNT_TRACE\s0\fR
are both set, the trace includes timestamps as well, which can be
useful in debugging.
.IP "\s-1ASRV_TRACE\s0" 4
.IX Item "ASRV_TRACE"
.PD 0
.IP "\s-1ASRV_TIME\s0" 4
.IX Item "ASRV_TIME"
.PD
These perform an analogous function to \fB\s-1ACLNT_TRACE\s0\fR and
\&\fB\s-1ACLNT_TIME\s0\fR, but print out RPCs received (as a server), rather
than ones made.
.IP "\s-1BINDADDR\s0" 4
.IX Item "BINDADDR"
If set, must contain an IPv4 address.  Whenever \s-1SFS\s0 creates a socket
that would be bound to \fB\s-1INADDR_ANY\s0\fR, it will be bound to
\&\fI\s-1BINDADDR\s0\fR instead (unless \fI\s-1BINDADDR\s0\fR is no longer a valid
local address).
.IP "\s-1FDLIM_HARD\s0" 4
.IX Item "FDLIM_HARD"
.PD 0
.IP "\s-1FDLIM_SOFT\s0" 4
.IX Item "FDLIM_SOFT"
.PD
Most of the daemons that comprise \s-1SFS\s0 use asynchronous I/O to handle
multiple network connections concurrently.  In order to be able to
handle as many concurrent connections as possible, the library raises
the per-process file descriptor limit to the maximum allowable value.
For privileged processes, this additionally means raising the
so-called ``hard'' file descriptor limit.  When raising these values,
if the \fB\s-1FDLIM_SOFT\s0\fR and \fB\s-1FDLIM_HARD\s0\fR environment variables are
not set, \s-1SFS\s0 saves their the old limit values in the environment
variables.
.Sp
An example of how this is used is by \fBrexd\fR, the remote
execution daemon.  \fBrexd\fR reduces the file descriptor limits
to the original values specified by these environment variables before
spawning an unprivileged user program.  These variables ordinarily
should not be of concern to users of \s-1SFS\s0, and are documented here
mostly for people who notice them and are curious.
.IP "\s-1SFS_AGENTSOCK\s0" 4
.IX Item "SFS_AGENTSOCK"
Ordinarily \fBsfskey\fR connects to \fBsfsagent\fR through the
\&\s-1SFS\s0 client daemon, \fBsfscd\fR.  However, by passing the
\&\fB\-S\fR option to \fBsfsagent\fR, it is possible to have
\&\fBsfsagent\fR bind an arbitrary Unix domain socket for
connections.  \fB\s-1SFS_AGENTSOCK\s0\fR can be set to such a pathname,
and \fBsfskey\fR will then connect to that socket.
.Sp
As a special case, if \fB\s-1SFS_AGENTSOCK\s0\fR is set to a negative number,
this is interpreted to mean a file descriptor number already connected
to the agent.  This feature is particularly useful when atomically
killing and starting \fBsfsagent\fR with the \fB\-k\fR flag.  In
this case, and program specified on the command line, or the default
\&\fI/usr/local/share/sfs/agentrc\fR script, will be run with
\&\fB\s-1SFS_AGENTSOCK\s0\fR set to a file descriptor.  Thus, if the script
loads keys into the agent by running \fBsfskey\fR, these keys will
be loaded into the new agent (before it takes over), rather than into
the old agent.
.IP "\s-1SFS_CONFIG\s0" 4
.IX Item "SFS_CONFIG"
The location in which to find the \fIsfs_config\fR file.  By default,
\&\s-1SFS\s0 uses configuration files in
\&\fI/usr/local/share/sfs/sfs_config\fR and
\&\fI/etc/sfs/sfs_config\fR.  \fBsfssd\fR sets this
environment variable when given the \fB\-S\fR option, so that
subsidiary daemons read the same configuration file.
.IP "\s-1SFS_HOSTNAME\s0" 4
.IX Item "SFS_HOSTNAME"
Overrides \s-1SFS\s0's default algorithm for figuring out the local hostname.
Several \s-1SFS\s0 programs must know the machine's fully-qualified hostname.
In particular, this name constitutes the official \fILocation\fR in a
server's self-certifying pathname (since a given file system should
have only one self-certifying hostname).  The hostname of an \s-1SFS\s0
server must exist in the \s-1DNS\s0 (as opposed to just
\&\fI/etc/hosts\fR) for many of the servers to work.
.Sp
The algorithm used by \s-1SFS\s0 is to determine a host's name is as follows.
It checks the system's name with the \fBgethostname\fR system call,
and if it is fully-qualified (i.e., has a ``.domain'' at the end) uses
that.  Otherwise, it appends the default domain name to the system
name.
.Sp
Sometimes \s-1SFS\s0's algorithm will not produce the correct hostname.  In
that case, you can specify the real hostname for each individual
daemon such as \fBsfsrwsd\fR and \fBsfsauthd\fR in their
confiruation files.  Or, you can just set the environment variable
\&\fB\s-1SFS_HOSTNAME\s0\fR before running \fBsfssd\fR.  Note that if you
do not have a \s-1DNS\s0 name, you can also set \fB\s-1SFS_HOSTNAME\s0\fR to the
numeric IPv4 address of your host, and then use the \s-1IP\s0 address as the
\&\fILocation\fR in self-certifying pathnames.
.IP "\s-1SFS_PORT\s0" 4
.IX Item "SFS_PORT"
This variable, if set, specifies official port number of an \s-1SFS\s0
server\*(--i.e. the \fI%\fR\fIport\fR that clients must append to the
hostname in the \fILocation\fR of the self-certifying pathname.  By
default (or if \fB\s-1SFS_PORT\s0\fR is set to 0), the self-ceritying
pathname contains no port number, which means to check \s-1DNS\s0 for \s-1SRV\s0
records, and if none are found to use port 4.
.Sp
Because servers have only one canonical self-certifying pathname,
setting \fB\s-1SFS_PORT\s0\fR to 4 is not the same thing as setting it to 0,
even without \s-1SRV\s0 records.  If you set \fB\s-1SFS_PORT\s0\fR to 4, then
clients who do not specify \fB%4\fR in the self-certifying pathname
will need to be redirected to a pathname containing \fI%4\fR via a
symbolic link, and \fBpwd\fR run on a client will show the
\&\fB%4\fR as part of the self-certifying pathname.
.Sp
Note further that the effects of this environment variable should not
be confused with the \fBBindAddr\fR option in \fIsfssd_config\fR.  For example, if you set up \s-1SRV\s0 records pointing to
\&\s-1TCP\s0 port 5 on your server, you might want to specify \fBBindAddr
0.0.0.0 5\fR in \fIsfssd_config\fR, but you almost certainly would not
want to set the \fB\s-1SFS_PORT\s0\fR environment variable to 5, as setting
\&\fB\s-1SFS_PORT\s0\fR to anything other than 0 means the self-certifying
pathname contains \fI%5\fR, which in turn means \s-1DNS\s0 \s-1SRV\s0 records
should not be used.  (I.e., a client accessing
\&\fI@host.domain,\fR\fIhostid\fR would be redirected to
\&\fI@host.domain%5,\fR\fIhostid\fR, which would bypass any \s-1SRV\s0
records for \fIhost.domain\fR and, depending on \s-1DNS\s0 data, might not
even resolve to the same \s-1IP\s0 address as the pathname without a
\&\fI%\fR.)
.IP "\s-1SFS_ROOT\s0" 4
.IX Item "SFS_ROOT"
Sets the root directory of the \s-1SFS\s0 file system, which is usually
\&\fI/sfs\fR.  Changing this for anything other than debugging purposes
is not recommended, as many symbolic links will break.
.IP "\s-1SFS_RUNINPLACE\s0" 4
.IX Item "SFS_RUNINPLACE"
\&\s-1SFS\s0 consists of a large number of interacting daemons.  Ordinarily,
these are launched by \fBsfscd\fR and \fBsfssd\fR.  If you
wish to run \s-1SFS\s0 without installing it, however, these commands will
not be able to find the subsidiary daemons they are supposed to
launch.  Setting \fB\s-1SFS_RUNINPLACE\s0\fR to the root of your build
directory allows \s-1SFS\s0 to be run without installing it.  Because this
option is mainly used for development, however, several programs
behave slightly differently when it is set.  \fBsfscd\fR and
\&\fBsfssd\fR both remain in the forground and send their output to
standard error, rather than to the system log.  Moreover,
\&\fBsfsagent\fR does take steps to protect itself from the
\&\fBptrace\fR system call, so that you can attach to it with the
debugger when running in place.
.IP "\s-1TMPDIR\s0" 4
.IX Item "TMPDIR"
Some \s-1SFS\s0 programs need to create temporary files or Unix-domain
sockets in the local file system.  By default, these programs use the
\&\fI/tmp\fR directory or created protected subdirectories of
\&\fI/tmp\fR.  However, you can override the location by setting the
\&\fB\s-1TMPDIR\s0\fR environment variable.
.IP "\s-1USER\s0" 4
.IX Item "USER"
In various places \s-1SFS\s0 needs a default username\*(--for example, when
running \fBsfskey login\fR.  \s-1SFS\s0 looks first at the \fB\s-1USER\s0\fR
environment variable, then uses the \fBgetlogin\fR system call, and
if that fails, looks up the current user \s-1ID\s0 in the system password
file.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIdirsearch\fR\|(1), \fInewaid\fR\|(1), \fIrex\fR\|(1), \fIsfsagent\fR\|(1), \fIsfskey\fR\|(1), \fIssu\fR\|(1), \fIsfs_config\fR\|(5), \fIsfs_hosts\fR\|(5), \fIsfs_srp_params\fR\|(5), \fIsfs_users\fR\|(5), \fIsfsauthd_config\fR\|(5), \fIsfscd_config\fR\|(5), \fIsfsrosd_config\fR\|(5), \fIsfsrwsd_config\fR\|(5), \fIsfssd_config\fR\|(5), \fIfunmount\fR\|(8), \fInfsmounter\fR\|(8), \fIsfsauthd\fR\|(8), \fIsfscd\fR\|(8), \fIsfsrosd\fR\|(8), \fIsfsrwcd\fR\|(8), \fIsfsrwsd\fR\|(8), \fIsfssd\fR\|(8), \fIvidb\fR\|(8)
.PP
The full documentation for \fB\s-1SFS\s0\fR is maintained as a Texinfo
manual.  If the \fBinfo\fR and \fB\s-1SFS\s0\fR programs are properly installed
at your site, the command \fBinfo \s-1SFS\s0\fR
should give you access to the complete manual.
.PP
For updates, documentation, and software distribution, please
see the \fB\s-1SFS\s0\fR website at \fIhttp://www.fs.net/\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
sfsdev@redlab.lcs.mit.edu
